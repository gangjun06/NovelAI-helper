datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          UserRole     @default(USER)
  accounts      Account[]
  sessions      Session[]
  Image         Image[]
  Collection    Collection[]
  Post          Post[]
}

enum Software {
  NOVEL_AI
  WEB_UI
}

enum ImageStatus {
  PUBLIC
  UNLISTED
}

model Image {
  id       String      @id @default(cuid())
  title    String?
  content  String?
  imageUrl String?
  authorId String
  author   User        @relation(fields: [authorId], references: [id])
  status   ImageStatus

  rootId    String?
  rootImage Image?  @relation("ImageList", fields: [rootId], references: [id])
  images    Image[] @relation("ImageList")

  originalTitle String?
  originalURL   String?

  imageSoftware  Software
  imagePrompt    String
  imageUCPrompt  String
  imageWidth     Int
  imageHeight    Int
  imageSteps     Int?
  imageScale     Float?
  imageStrength  Float?
  imageNoise     Float?
  imageSeed      Int?
  imageSampler   String?
  imageClipSkip  Int?
  imageModelHash String?
  imageSource    String?
  imageHypernet  String?
  imageEta       Float?
  imageMaskBlur  Float?
  imageBatchSize Float?
  imageBatchPos  Float?

  other Json?

  tags   String[]
  ucTags String[]

  collections Collection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt(sort: Desc), tags, ucTags])
}

enum CollectionStatus {
  PUBLIC
  UNLISTED
  PRIVATE
}

model Collection {
  id          String           @id @default(cuid())
  title       String
  description String
  status      CollectionStatus
  images      Image[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostCategory {
  id   String @id @default(cuid())
  name String

  readAble    UserRole
  writeAble   UserRole
  commentAble UserRole
  post        Post[]
}

model Post {
  id             String       @id @default(cuid())
  title          String
  content        String
  authorId       String
  author         User         @relation(fields: [authorId], references: [id])
  postCategoryId String
  postCategory   PostCategory @relation(fields: [postCategoryId], references: [id])

  readAble    UserRole
  writeAble   UserRole
  commentAble UserRole

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
